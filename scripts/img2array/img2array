#!/usr/bin/env python3
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import argparse

def image_to_rgb888_array(image_path):
    img = Image.open(image_path)
    img = img.convert('RGB')
    pixels = list(img.getdata())
    
    rgb888_array = []
    
    for pixel in pixels:
        r, g, b = pixel
        rgb888_array.extend([r, g, b])
        
    return rgb888_array

def display_rgb888_array(rgb888_array, width, height):
    rgb_image = np.array(rgb888_array).reshape(height, width, 3)
    
    plt.imshow(rgb_image)
    plt.axis('off')
    plt.show()

def save_rgb888_as_hex32(rgb888_array, output_file):
    with open(output_file, 'w') as file:
        for i in range(0, len(rgb888_array), 3):
            r, g, b = rgb888_array[i:i+3]
            hex32_value = f"0x00{r:02X}{g:02X}{b:02X}\n"
            file.write(hex32_value)

def main():
    parser = argparse.ArgumentParser(description="Convert an image to RGB888 format and save it as a hexadecimal text file.")
    parser.add_argument("image_path", help="Path to the input image file.")
    parser.add_argument("output_txt_path", help="Path to the output hexadecimal text file.")
    
    args = parser.parse_args()
    image_path = args.image_path
    output_txt_path = args.output_txt_path

    img = Image.open(image_path)
    width, height = img.size
    array = image_to_rgb888_array(image_path)

    # display_rgb888_array(array, width, height)
    
    save_rgb888_as_hex32(array, output_txt_path)

if __name__ == "__main__":
    main()
