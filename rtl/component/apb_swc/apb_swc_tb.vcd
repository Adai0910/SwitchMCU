$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $scope module apb_swc_tb $end
   $var wire 32 : PD_NUM [31:0] $end
   $var wire  8 < cnt [7:0] $end
   $var wire 32 ) paddr [31:0] $end
   $var wire  1 8 pclk $end
   $var wire  1 + penable $end
   $var wire 32 / prdata [31:0] $end
   $var wire  1 . pready $end
   $var wire  1 # prstn $end
   $var wire  3 * pselx [2:0] $end
   $var wire  1 ; pslverr $end
   $var wire 32 - pwdata [31:0] $end
   $var wire  1 , pwrite $end
   $var wire 32 ( rbuffaddr [31:0] $end
   $var wire 32 2 rbuffdata [31:0] $end
   $var wire  1 1 rbuffwrite $end
   $var wire  1 ' rreq $end
   $var wire 32 & wbuffaddr [31:0] $end
   $var wire 32 % wbuffdata [31:0] $end
   $var wire  1 0 wbuffread $end
   $var wire  1 $ wreq $end
   $scope module apbm_swc_inst $end
    $var wire 32 ? ACCESS [31:0] $end
    $var wire 32 = IDLE [31:0] $end
    $var wire 32 : PD_NUM [31:0] $end
    $var wire 32 > STEUP [31:0] $end
    $var wire  2 9 nextstate [1:0] $end
    $var wire 32 ) paddr [31:0] $end
    $var wire  1 8 pclk $end
    $var wire  1 + penable $end
    $var wire 32 / prdata [31:0] $end
    $var wire  1 . pready $end
    $var wire  1 # prstn $end
    $var wire  3 * pselx [2:0] $end
    $var wire  1 ; pslverr $end
    $var wire 32 - pwdata [31:0] $end
    $var wire  1 , pwrite $end
    $var wire 32 ( rbuffaddr [31:0] $end
    $var wire 32 2 rbuffdata [31:0] $end
    $var wire  1 1 rbuffwrite $end
    $var wire  1 ' rreq $end
    $var wire  2 3 state [1:0] $end
    $var wire 32 & wbuffaddr [31:0] $end
    $var wire 32 % wbuffdata [31:0] $end
    $var wire  1 0 wbuffread $end
    $var wire  1 $ wreq $end
   $upscope $end
   $scope module apbs_swc_inst $end
    $var wire 32 : PD_NUM [31:0] $end
    $var wire 32 5 SPI_CR [31:0] $end
    $var wire 32 @ SPI_CR_ADDR [31:0] $end
    $var wire 32 D SPI_RDR [31:0] $end
    $var wire 32 C SPI_RDR_ADDR [31:0] $end
    $var wire 32 6 SPI_SR [31:0] $end
    $var wire 32 A SPI_SR_ADDR [31:0] $end
    $var wire 32 7 SPI_WDR [31:0] $end
    $var wire 32 B SPI_WDR_ADDR [31:0] $end
    $var wire 32 ) paddr [31:0] $end
    $var wire  1 8 pclk $end
    $var wire  1 + penable $end
    $var wire 32 / prdata [31:0] $end
    $var wire  1 . pready $end
    $var wire  1 # prstn $end
    $var wire  1 4 psel $end
    $var wire  1 ; pslverr $end
    $var wire 32 - pwdata [31:0] $end
    $var wire  1 , pwrite $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
0'
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b000 *
0+
0,
b00000000000000000000000000000000 -
0.
b00000000000000000000000000000000 /
00
01
b00000000000000000000000000000000 2
b00 3
04
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
18
b00 9
b00000000000000000000000000000011 :
0;
b00000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000001 >
b00000000000000000000000000000010 ?
b00000000000100000000000000000000 @
b00000000000100000000000000000100 A
b00000000000100000000000000001000 B
b00000000000100000000000000001100 C
b00000000000000000000000000000000 D
#1
#5
08
#10
b00000000000000000000000000000010 6
18
#11
1#
#15
08
#20
18
#21
1$
b00000000000000000000000000010000 %
b00000000000100000000000000000000 &
b01 9
#25
08
#30
b00000000000100000000000000000000 )
b001 *
1,
b00000000000000000000000000010000 -
10
b01 3
14
18
b10 9
#35
08
#40
1+
1.
00
b10 3
18
b01 9
#41
b00000000000000000000000000010010 %
b00000000000100000000000000000100 &
#45
08
#50
b00000000000100000000000000000100 )
0+
b00000000000000000000000000010010 -
10
b01 3
b00000000000000000000000000010000 5
18
b10 9
#55
08
#60
1+
00
b10 3
18
b01 9
#61
0$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
1'
b00000000000100000000000000000000 (
#65
08
#70
b00000000000100000000000000000000 )
0+
0,
b00000000000000000000000000000000 -
b01 3
b00000000000000000000000000010010 6
18
b10 9
#75
08
#80
1+
b00000000000000000000000000010000 /
b10 3
18
b01 9
#81
b00000000000100000000000000000100 (
#85
08
#90
b00000000000100000000000000000100 )
0+
11
b00000000000000000000000000010000 2
b01 3
18
b10 9
#95
08
#100
1+
b00000000000000000000000000010010 /
01
b00000000000000000000000000000000 2
b10 3
18
b01 9
#101
0'
b00000000000000000000000000000000 (
b00 9
#105
08
#110
b00000000000000000000000000000000 )
b000 *
0+
11
b00000000000000000000000000010010 2
b00 3
04
18
#115
08
#120
0.
b00000000000000000000000000000000 /
01
b00000000000000000000000000000000 2
18
#125
08
#130
18
#135
08
#140
18
#145
08
#150
18
#151
1$
b00000000000000000000000000010100 %
b00000000000100000000000000001000 &
b01 9
#155
08
#160
b00000000000100000000000000001000 )
b001 *
1,
b00000000000000000000000000010100 -
10
b01 3
14
18
b10 9
#165
08
#170
1+
1.
00
b10 3
18
b01 9
#171
0$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00 9
#175
08
#180
b00000000000000000000000000000000 )
b000 *
0+
0,
b00000000000000000000000000000000 -
b00 3
04
b00000000000000000000000000010100 7
18
#185
08
#190
0.
18
#195
08
#200
18
#205
08
#210
18
#215
08
#220
18
#221
1'
b00000000000100000000000000001000 (
b01 9
#225
08
#230
b00000000000100000000000000001000 )
b001 *
b01 3
14
18
b10 9
#235
08
#240
1+
1.
b00000000000000000000000000010100 /
b10 3
18
b01 9
#241
0'
b00000000000000000000000000000000 (
b00 9
#245
08
#250
b00000000000000000000000000000000 )
b000 *
0+
11
b00000000000000000000000000010100 2
b00 3
04
18
#255
08
#260
0.
b00000000000000000000000000000000 /
01
b00000000000000000000000000000000 2
18
#265
08
#270
18
#275
08
#280
18
#285
08
#290
18
#295
08
#300
18
#305
08
#310
18
#315
08
#320
18
#325
08
#330
18
#335
08
#340
18
#345
08
#350
18
#355
08
#360
18
#365
08
#370
18
#375
08
#380
18
#385
08
#390
18
#395
08
#400
18
#405
08
#410
18
#415
08
#420
18
#425
08
#430
18
#435
08
#440
18
#445
08
#450
18
#455
08
#460
18
#465
08
#470
18
#475
08
#480
18
#485
08
#490
18
#495
08
#500
18
