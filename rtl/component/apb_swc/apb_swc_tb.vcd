$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $scope module apb_swc_tb $end
   $var wire 32 8 PD_NUM [31:0] $end
   $var wire  8 < cnt [7:0] $end
   $var wire 32 ) paddr [31:0] $end
   $var wire  1 6 pclk $end
   $var wire  1 + penable $end
   $var wire 32 / prdata [31:0] $end
   $var wire  1 . pready $end
   $var wire  1 # prstn $end
   $var wire  3 * pselx [2:0] $end
   $var wire  1 9 pslverr $end
   $var wire 32 - pwdata [31:0] $end
   $var wire  1 , pwrite $end
   $var wire 32 ( rbuffaddr [31:0] $end
   $var wire 32 ; rbuffdata [31:0] $end
   $var wire  1 : rbuffwrite $end
   $var wire  1 ' rreq $end
   $var wire 32 & wbuffaddr [31:0] $end
   $var wire 32 % wbuffdata [31:0] $end
   $var wire  1 0 wbuffread $end
   $var wire  1 $ wreq $end
   $scope module apbm_swc_inst $end
    $var wire 32 ? ACCESS [31:0] $end
    $var wire 32 = IDLE [31:0] $end
    $var wire 32 8 PD_NUM [31:0] $end
    $var wire 32 > STEUP [31:0] $end
    $var wire  2 7 nextstate [1:0] $end
    $var wire 32 ) paddr [31:0] $end
    $var wire  1 6 pclk $end
    $var wire  1 + penable $end
    $var wire 32 / prdata [31:0] $end
    $var wire  1 . pready $end
    $var wire  1 # prstn $end
    $var wire  3 * pselx [2:0] $end
    $var wire  1 9 pslverr $end
    $var wire 32 - pwdata [31:0] $end
    $var wire  1 , pwrite $end
    $var wire 32 ( rbuffaddr [31:0] $end
    $var wire 32 ; rbuffdata [31:0] $end
    $var wire  1 : rbuffwrite $end
    $var wire  1 ' rreq $end
    $var wire  2 1 state [1:0] $end
    $var wire 32 & wbuffaddr [31:0] $end
    $var wire 32 % wbuffdata [31:0] $end
    $var wire  1 0 wbuffread $end
    $var wire  1 $ wreq $end
   $upscope $end
   $scope module apbs_swc_inst $end
    $var wire 32 8 PD_NUM [31:0] $end
    $var wire 32 3 SPI_CR [31:0] $end
    $var wire 32 @ SPI_CR_ADDR [31:0] $end
    $var wire 32 D SPI_RDR [31:0] $end
    $var wire 32 C SPI_RDR_ADDR [31:0] $end
    $var wire 32 4 SPI_SR [31:0] $end
    $var wire 32 A SPI_SR_ADDR [31:0] $end
    $var wire 32 5 SPI_WDR [31:0] $end
    $var wire 32 B SPI_WDR_ADDR [31:0] $end
    $var wire 32 ) paddr [31:0] $end
    $var wire  1 6 pclk $end
    $var wire  1 + penable $end
    $var wire 32 / prdata [31:0] $end
    $var wire  1 . pready $end
    $var wire  1 # prstn $end
    $var wire  1 2 psel $end
    $var wire  1 9 pslverr $end
    $var wire 32 - pwdata [31:0] $end
    $var wire  1 , pwrite $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
0'
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b000 *
0+
0,
b00000000000000000000000000000000 -
0.
b00000000000000000000000000000000 /
00
b00 1
02
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
16
b00 7
b00000000000000000000000000000011 8
09
0:
b00000000000000000000000000000000 ;
b00000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000001 >
b00000000000000000000000000000010 ?
b00000000000100000000000000000000 @
b00000000000100000000000000000100 A
b00000000000100000000000000001000 B
b00000000000100000000000000001100 C
b00000000000000000000000000000000 D
#1
#5
06
#10
b00000000000000000000000000000010 4
16
#11
1#
#15
06
#20
16
#21
1$
b00000000000000000000000000010000 %
b00000000000100000000000000000000 &
b01 7
#25
06
#30
b00000000000100000000000000000000 )
b001 *
1,
b00000000000000000000000000010000 -
10
b01 1
12
16
b10 7
#35
06
#40
1+
1.
00
b10 1
16
b01 7
#41
b00000000000000000000000000010010 %
b00000000000100000000000000000100 &
#45
06
#50
b00000000000100000000000000000100 )
0+
b00000000000000000000000000010010 -
10
b01 1
b00000000000000000000000000010000 3
16
b10 7
#55
06
#60
1+
00
b10 1
16
b01 7
#61
0$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
1'
b00000000000100000000000000000000 (
#65
06
#70
b00000000000100000000000000000000 )
0+
0,
b00000000000000000000000000000000 -
10
b01 1
b00000000000000000000000000010010 4
16
b10 7
#75
06
#80
1+
b00000000000000000000000000010000 /
00
b10 1
16
b01 7
#81
b00000000000100000000000000000100 (
#85
06
#90
b00000000000100000000000000000100 )
0+
10
b01 1
16
b10 7
#95
06
#100
1+
b00000000000000000000000000010010 /
00
b10 1
16
b01 7
#101
0'
b00000000000000000000000000000000 (
b00 7
#105
06
#110
b00000000000000000000000000000000 )
b000 *
0+
b00 1
02
16
#115
06
#120
0.
b00000000000000000000000000000000 /
16
#125
06
#130
16
#135
06
#140
16
#145
06
#150
16
#151
1$
b00000000000000000000000000010100 %
b00000000000100000000000000001000 &
b01 7
#155
06
#160
b00000000000100000000000000001000 )
b001 *
1,
b00000000000000000000000000010100 -
10
b01 1
12
16
b10 7
#165
06
#170
1+
1.
00
b10 1
16
b01 7
#171
0$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00 7
#175
06
#180
b00000000000000000000000000000000 )
b000 *
0+
0,
b00000000000000000000000000000000 -
b00 1
02
b00000000000000000000000000010100 5
16
#185
06
#190
0.
16
#195
06
#200
16
#205
06
#210
16
#215
06
#220
16
#221
1'
b00000000000100000000000000001000 (
b01 7
#225
06
#230
b00000000000100000000000000001000 )
b001 *
10
b01 1
12
16
b10 7
#235
06
#240
1+
1.
b00000000000000000000000000010100 /
00
b10 1
16
b01 7
#241
0'
b00000000000000000000000000000000 (
b00 7
#245
06
#250
b00000000000000000000000000000000 )
b000 *
0+
b00 1
02
16
#255
06
#260
0.
b00000000000000000000000000000000 /
16
#265
06
#270
16
#275
06
#280
16
#285
06
#290
16
#295
06
#300
16
#305
06
#310
16
#315
06
#320
16
#325
06
#330
16
#335
06
#340
16
#345
06
#350
16
#355
06
#360
16
#365
06
#370
16
#375
06
#380
16
#385
06
#390
16
#395
06
#400
16
#405
06
#410
16
#415
06
#420
16
#425
06
#430
16
#435
06
#440
16
#445
06
#450
16
#455
06
#460
16
#465
06
#470
16
#475
06
#480
16
#485
06
#490
16
#495
06
#500
16
