$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $scope module ahbs_swc_tb $end
   $var wire  1 7 done $end
   $var wire 32 $ haddr [31:0] $end
   $var wire  1 2 hclk $end
   $var wire  1 % hmastlock $end
   $var wire  7 & hprot [6:0] $end
   $var wire 32 + hrdata [31:0] $end
   $var wire  1 4 hready $end
   $var wire  1 5 hresp $end
   $var wire  1 # hrstn $end
   $var wire  3 ' hsize [2:0] $end
   $var wire  2 ( htrans [1:0] $end
   $var wire 32 ) hwdata [31:0] $end
   $var wire  1 * hwrite $end
   $var wire 32 0 rbuffaddr [31:0] $end
   $var wire 32 6 rbuffdata [31:0] $end
   $var wire  1 8 resp $end
   $var wire  1 / rreq $end
   $var wire 32 . wbuffaddr [31:0] $end
   $var wire 32 - wbuffdata [31:0] $end
   $var wire  1 , wreq $end
   $scope module ahbs_swc_inst $end
    $var wire  2 = HTRANS_BUSY [1:0] $end
    $var wire  2 < HTRANS_IDLE [1:0] $end
    $var wire  2 > HTRANS_NONSEQ [1:0] $end
    $var wire  2 ? HTRANS_SEQ [1:0] $end
    $var wire  4 9 IDLE [3:0] $end
    $var wire  4 : READ [3:0] $end
    $var wire  4 ; WRITE [3:0] $end
    $var wire  1 7 done $end
    $var wire 32 $ haddr [31:0] $end
    $var wire  1 2 hclk $end
    $var wire  1 % hmastlock $end
    $var wire  7 & hprot [6:0] $end
    $var wire 32 + hrdata [31:0] $end
    $var wire  1 4 hready $end
    $var wire  1 5 hresp $end
    $var wire  1 # hrstn $end
    $var wire  3 ' hsize [2:0] $end
    $var wire  2 ( htrans [1:0] $end
    $var wire 32 ) hwdata [31:0] $end
    $var wire  1 * hwrite $end
    $var wire  4 3 next_state [3:0] $end
    $var wire 32 0 rbuffaddr [31:0] $end
    $var wire 32 6 rbuffdata [31:0] $end
    $var wire  1 8 resp $end
    $var wire  1 / rreq $end
    $var wire  4 1 state [3:0] $end
    $var wire 32 . wbuffaddr [31:0] $end
    $var wire 32 - wbuffdata [31:0] $end
    $var wire  1 , wreq $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
b00000000000000000000000000000000 $
0%
b0000000 &
b000 '
b00 (
b00000000000000000000000000000000 )
0*
b00000000000000000000000000000000 +
0,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
0/
b00000000000000000000000000000000 0
b0000 1
12
b0000 3
04
05
b00000000000000000000000000000000 6
07
08
b0000 9
b0001 :
b0010 ;
b00 <
b01 =
b10 >
b11 ?
#1
#5
02
#10
12
#11
1#
#15
02
#20
12
#21
b00010001000000010000000100000000 $
b010 '
b10 (
b11011110101011011011111011101111 )
1*
#25
02
#30
12
#31
0*
#35
02
#40
12
#41
b00 (
#45
02
#50
12
#51
b00000000000000000000000000000000 $
b10 (
#55
02
#60
12
#61
b00 (
#65
02
#70
12
#75
02
#80
12
#85
02
#90
12
#95
02
#100
12
#105
02
#110
12
#115
02
#120
12
#125
02
#130
12
#135
02
#140
12
#145
02
#150
12
#155
02
#160
12
#165
02
#170
12
#175
02
#180
12
#185
02
#190
12
#195
02
#200
12
#205
02
#210
12
#215
02
#220
12
#225
02
#230
12
#235
02
#240
12
#245
02
#250
12
#255
02
#260
12
#265
02
#270
12
#275
02
#280
12
#285
02
#290
12
#295
02
#300
12
#305
02
#310
12
#315
02
#320
12
#325
02
#330
12
#335
02
#340
12
#345
02
#350
12
#355
02
#360
12
#365
02
#370
12
#375
02
#380
12
#385
02
#390
12
#395
02
#400
12
#405
02
#410
12
#415
02
#420
12
#425
02
#430
12
#435
02
#440
12
#445
02
#450
12
#455
02
#460
12
#465
02
#470
12
#475
02
#480
12
#485
02
#490
12
#495
02
#500
12
